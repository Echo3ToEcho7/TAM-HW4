{"ts":1343226409944,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var rally = require(\"./lib/rallyapi\");\n\nvar conn = new rally.RallyConnection({\n    username: \"cobrien@rallydev.com\",\n    password: \"Just4Rally\",\n    server: \"demo01.rallydev.com\"\n});\n\nconsole.log(\"Connecting to Rally\");\n\nconn.connect().when(function connected(results) {\n   console.log(\"We are connected\"); \n});"]],"start1":0,"start2":0,"length1":0,"length2":311}]],"length":311}
{"contributors":[],"silentsave":true,"ts":1343226454648,"patch":[[{"diffs":[[0,"api\");\n\n"],[1,"// Create a new connection to Rally\n"],[0,"var conn"]],"start1":32,"start2":32,"length1":16,"length2":52},{"diffs":[[0,"emo0"],[-1,"1"],[1,"2"],[0,".ral"]],"start1":195,"start2":195,"length1":9,"length2":9},{"diffs":[[0,");\n\n"],[-1,"conn.connect().when(function connected(results) {\n   console.log(\"We are connected\"); "],[1,"// The connect method will validate the connection config\n// and will give you your user object\nconn.connect().when(function connected(user) {\n\tconsole.log(\"We are connected\"); \n\n\t// We want to find all the TimeEntryItems\n\tconn.findAll({\n\t   type: \"TimeEntryItem\",\n\t   fetch: [\"Task\", \"Actuals\", \"Name\", \"Values\", \"Hours\"].join(\",\")\n\t}).when(function foundTasks(results) {\n\t\t// When done, we will be processing the results\n\t\tvar res = results.QueryResult.Results;\n\n\t\t// This function will handle the processing of the results\n\t\t// A for loop will not work due to the asynchronous nature\n\t\t// of JavaScript\n\t\tvar processNext = function processNext(resList) {\n\t\t\t// If there is nothing in the list, we are done\n\t\t\tif (resList.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Array.shift will pull the first item off the array\n\t\t\tvar current = resList.shift();\n\t\t\tvar j, jj;\n\n\t\t\t// Will will need to calculate the Totals\n\t\t\tvar total = 0;\n\t\t\tconsole.log(current.Task.Name, current.Task.Actuals, current.Values.length);\n\n\t\t\t// Loop through all the TimeEntryValues gathering the Hours\n\t\t\tfor (j = 0, jj = current.Values.length; j < jj; j++) {\n\t\t\t\tconsole.log(\"\\t\", current.Values[j].Hours);\n\t\t\t\ttotal += parseInt(\"\" + current.Values[j].Hours, 10);\n\t\t\t}\n\n\t\t\tconsole.log(\"\\tTotal\", total);\n\n\t\t\t// Update the Task with the Actuals computed from the Time Sheet\n\t\t\tconn.update(current.Task._ref, {\n\t\t\t\tTask: {\n\t\t\t\t\tActuals: total\n\t\t\t\t}\n\t\t\t}).when(function (taskUpdate) {\n\t\t\t\t// When done, process the next item on the list\n\t\t\t\tprocessNext(resList);\n\t\t\t});\n\t\t};\t\n\n\t\t// Kick off the process\n\t\tprocessNext(res);\n   });"],[0,"\n});"],[1,"\n"]],"start1":253,"start2":253,"length1":94,"length2":1605}]],"length":1858,"saved":false}
